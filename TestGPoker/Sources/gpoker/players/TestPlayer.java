package gpoker.players;

import gpoker.*;
import org.jdom2.Element;
import java.util.List;

/**
 * The TestPlayer is testing strategies.
 *
 * @author Helmut A. Mayer
 */
public class TestPlayer extends Player {


	/**
	 * Creates the player via XML.
	 *
	 * @param element an XML player element
	 */
	public TestPlayer(Element element) {

		super(element);
	}


	/**
	 * Constructs the player.
	 *
	 * @param name  the player's name
	 * @param chips the amount of chips the player has.
	 */
	public TestPlayer(String name, int chips) {

		super(name, chips);
	}


	/**
	 * The player's moves cannot be trusted.
	 *
	 * @return false.
	 */
	public boolean isTrusted() {

		return false;
	}


	/**
	 * Returns the move which is generated by implementing evolved code.
	 *
	 * @return the move generated
	 */
	public Move act() {

		Dealer dealer = Director.getInstance().getDealer();
		hand.sort();
		List<Card> cards = hand.getCards();
		int lowCard = cards.get(1).getRank();
		int highCard = cards.get(0).getRank();
		int handValue = dealer.evaluate(getHand());
		int totalChips = dealer.getTotalChips();
		int potSize = dealer.getPot();
		int stage = dealer.getStage();
		int bet;

		Move move;
		if(stage == 0){
			if(lowCard < 10 && highCard != lowCard){
				move = new Move(Move.CHECK);
			}else{
				if(highCard == lowCard){
					if(lowCard >= 8){
						move = new Move(Move.RAISE);
						if(chips >= 4*potSize)
							bet = 4*potSize;
						else
							bet = chips;
						move.setBet(bet);
					}else
						move = new Move(Move.CALL);
				}else{
					move = new Move(Move.CALL);
				}
			}
		}else{
			if(handValue >= Hand.TWO_PAIR){
				move = new Move(Move.RAISE);
				if(chips >= 4*potSize)
					bet = 4*potSize;
				else
					bet = chips;
				move.setBet(bet);
			}else{
				if(handValue == Hand.ONE_PAIR){
					if(stage == 1){
						move = new Move(Move.CALL);
					}else{
						move = new Move(Move.CHECK);
					}
				}else{
					move = new Move(Move.CHECK);
				}
			}
		}

//		double betRatio = (double)dealer.getCallBet(this) / (double)totalChips;
//		Move move = new Move(Move.CALL);
//		if (betRatio >= 0.4717) {
//			if (hand == Hand.HIGH_CARD)				// code from evolved player against Pattern
//				move.setType(Move.FOLD);
//		}
//		else {
//			move.setType(Move.RAISE);
//			move.setBet((int)(1.778 * dealer.getPot()));
//		}

//		double potValue = (double)dealer.getPot() / (double)totalChips;
		//Move move = new Move(Move.RAISE);
//		if (hand > Hand.ONE_PAIR)						// code from evolved player against Call
//			move.setBet((int)(1.9891 * dealer.getPot()));
//		else {
//			if (potValue >= 0.1392)
//				move.setType(Move.CHECK);
//			else
//				move.setBet((int)(1.9108 * dealer.getPot()));
//		}

		//double handValue = (double)hand / (double)Hand.STRAIGHT_FLUSH;
//		if (handValue >= potValue)                           		// code from evolved player against Call
//			move.setBet((int)(1.0986 * dealer.getPot()));
//		else
//			move.setType(Move.CHECK);

//		if (0.913 * potValue <= handValue)
//			move.setBet((int)(1.2646 * dealer.getPot()));			// code from evolved player against Call
//		else														// using mult and div nodes
//			move.setType(Move.CHECK);

		/* Stage Player */
//		double stageValue = (double)dealer.getStage() / (double)Dealer.RIVER;
//		if (handValue <= 0.2293 * stageValue)                       // code from evolved player against Call
//			move.setType(Move.CHECK);                               // using mult and div nodes
//			else if (hand < Hand.TWO_PAIR)							// using tree mutation
//				move.setBet((int)(1.0925 * dealer.getPot()));       // I call it Stage Player
//			else
//				move.setBet((int)(1.9710 * dealer.getPot()));

		/* AntiStage Player */
//		if (hand > Hand.HIGH_CARD)
//			move.setBet((int)(1.2259 * dealer.getPot()));			// evolved against Stage
//		else if (dealer.getStage() == Dealer.PRE_FLOP)
//			move.setType(Move.CALL);
//		else
//			move.setType(Move.FOLD);

		/* AntiAntiStage Player with hole cards. */
//		if (!getHand().isSorted())                                        		// hand is always hole cards
//			getHand().sort();
//		if (0.0892 * ((double)getHand().getCards().get(0).getRank()) / (double)Card.ACE <= potValue) {
//			if (hand > Hand.ONE_PAIR)
//				move.setBet((int)(1.0435 * dealer.getPot()));
//			else
//				move.setType(Move.FOLD);
//		}
//		else
//			move.setType(Move.CALL);

		/* Four Player evolved against Call, Pattern, and Random. */
		//double callValue = dealer.getCallBet(this) / (double)totalChips;
//
//		if (hand > Hand.HIGH_CARD)
//			move.setBet((int)(1.6510 * dealer.getPot()));
//		else if (potValue <= 0.4399) {
//			if (dealer.getStage() == Dealer.PRE_FLOP) {
//				if (callValue <= 0.2354) {
//					if (handValue * potValue <= callValue)
//						move.setType(Move.CALL);
//					else
//						move.setType(Move.CHECK);
//				} else
//					move.setType(Move.FOLD);
//			} else
//				move.setType(Move.FOLD);
//		} else
//			move.setBet((int)(0.5234 * dealer.getPot()));


		/* Four Player evolved against Call, Pattern, and Random. */
//		double callValue = dealer.getCallBet(this) / (double)totalChips;
//
//		if (hand > Hand.HIGH_CARD)
//			move.setBet((int)(1.6510 * dealer.getPot()));
//		else if (potValue <= 0.4399) {
//			if (dealer.getStage() == Dealer.PRE_FLOP) {
//				if (callValue <= 0.2354) {
//					if (handValue * potValue <= callValue)
//						move.setType(Move.CALL);
//					else
//						move.setType(Move.CHECK);
//				} else
//					move.setType(Move.FOLD);
//			} else
//				move.setType(Move.FOLD);
//		} else
//			move.setBet((int)(0.5234 * dealer.getPot()));

		/** Three Player evolved against AntiStage and AntiAntiStage. */
//		if (callValue >= 0.0041) { 						// means if call > big blind
//	  		if (hand > Hand.ONE_PAIR)
//	    		move.setType(Move.CALL);
//	  		else
//	    		move.setType(Move.FOLD);
//		} else
//	  		move.setBet((int)(0.6970 * dealer.getPot()));

		/* A first culture player. */
//		if (!getHand().isSorted())                                        		// hand is always hole cards
//			getHand().sort();
//		if (callValue < 0.0040)
//			move.setBet((int)(0.4654 * dealer.getPot()));
//		else if (getCards().get(1).getRank() > Card.NINE)
//			move.setBet((int)(0.3374 * dealer.getPot()));
//		else
//			move.setType(Move.CHECK);

		/* A culture chip leader. */
//    	if (getCards().get(1).getRank() > Card.NINE)
//			move.setBet((int)(0.6715 * dealer.getPot()));
  //  	else if (callValue <= 0.0275 * handValue)
	//		move.setBet((int)(0.0097 * dealer.getPot()));
//      	else
//			move.setType(Move.CHECK);

		/* A robust culture player. */
//		if (getCards().get(1).getRank() > Card.EIGHT)
//			move.setBet((int)(0.4340 * dealer.getPot()));
//		else
//			move.setType(Move.FOLD);

		/* A good culture player. */
//		if (hand > Hand.ONE_PAIR)
//			move.setBet((int)(1.2609 * dealer.getPot()));
//		else if (callValue / potValue < (double)getCards().get(1).getRank() / (double)Card.ACE)
//			move.setType(Move.CALL);
//		else
//			move.setType(Move.FOLD);

		/** A good culture chip leader. */
//		if (0.0116 <= potValue / handValue) {
//			if (getCards().get(1).getRank() > Card.NINE)
//				move.setBet((int)(1.2195 * dealer.getPot()));
//			else
//				move.setType(Move.FOLD);
//		}
//		else
//			move.setType(Move.CALL);

		/** A solid culture player. */
//		if (getCards().get(1).getRank() < Card.JACK) {
//			if (dealer.getCallBet(this) < 9)
//				move.setType(Move.CALL);
//			else
//				move.setType(Move.CHECK);
//		}
//		else
//			move.setBet((int)(0.9849 * dealer.getPot()));

		return move;
	}

}
